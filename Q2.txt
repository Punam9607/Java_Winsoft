Q2.
public class MaximumSumPath {
    public static int maxSumPath(int[] arr1, int[] arr2) {
        int sum1 = 0, sum2 = 0, result = 0;
        int i = 0, j = 0;

        // Traverse both arrays
        while (i < arr1.length && j < arr2.length) {
            // If current elements of both arrays are same, calculate the maximum sum and add it to result
            if (arr1[i] == arr2[j]) {
                result += Math.max(sum1, sum2) + arr1[i]; // Add the maximum sum between common elements
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
            // If current element of arr1 is smaller, add it to sum1
            else if (arr1[i] < arr2[j]) {
                sum1 += arr1[i++];
            }
            // If current element of arr2 is smaller, add it to sum2
            else {
                sum2 += arr2[j++];
            }
        }

        // Add remaining elements of arr1
        while (i < arr1.length) {
            sum1 += arr1[i++];
        }
        // Add remaining elements of arr2
        while (j < arr2.length) {
            sum2 += arr2[j++];
        }

        // Add the maximum of remaining sums to result
        result += Math.max(sum1, sum2);
        return result;
    }

    public static void main(String[] args) {
        int[] arr1 = {2, 3, 7, 10, 12};
        int[] arr2 = {1, 5, 7, 8};
        System.out.println("Maximum sum path: " + maxSumPath(arr1, arr2)); // Output: 35
    }
}
